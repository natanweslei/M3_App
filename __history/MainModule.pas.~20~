unit MainModule;

interface

uses
  uniGUIMainModule,
  SysUtils,
  Classes,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.Phys.PG,
  FireDAC.Phys.PGDef,
  FireDAC.VCLUI.Wait,
  FireDAC.Comp.Client,
  uConexaoPostgreSQL,
  Data.DB;

type
  TUniMainModule = class(TUniGUIMainModule)
    Conexao: TFDConnection;
    procedure UniGUIMainModuleCreate(Sender: TObject);
  private
  public
    UserId : integer;
    FDPhysPgDriverLink1: TFDPhysPgDriverLink;
  end;

function UniMainModule: TUniMainModule;

implementation

{$R *.dfm}

uses
  UniGUIVars, ServerModule, uniGUIApplication;

function UniMainModule: TUniMainModule;
begin
  Result := TUniMainModule(UniApplication.UniMainModule)
end;

procedure TUniMainModule.UniGUIMainModuleCreate(Sender: TObject);
var
  MinhaConexao: TConexaoPostgreSQL;
begin
  if not Assigned(FDPhysPgDriverLink1) then
    FDPhysPgDriverLink1 := TFDPhysPgDriverLink.Create(nil);
  MinhaConexao := TConexaoPostgreSQL.Create;
  try
    if MinhaConexao.Conectar then
    begin
      // Faça operações no banco de dados aqui

      MinhaConexao.Desconectar;
    end
    else
      ShowMessage('Não foi possível conectar ao banco de dados.');
  finally
    MinhaConexao.Free;
  end;

end;

initialization
  RegisterMainModuleClass(TUniMainModule);
end.
